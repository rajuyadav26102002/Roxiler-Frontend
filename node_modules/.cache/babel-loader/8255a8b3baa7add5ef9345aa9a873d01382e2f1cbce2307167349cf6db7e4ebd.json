{"ast":null,"code":"var _jsxFileName = \"P:\\\\Roxilers_Assesment\\\\roxiler-frontend-master\\\\src\\\\components\\\\BarChart\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, Legend, ResponsiveContainer, CartesianGrid } from 'recharts';\nimport axios from 'axios';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BarChartComponent = props => {\n  _s();\n  const [barChartData, setBarChartData] = useState([]);\n  const {\n    selectedMonth\n  } = props;\n  useEffect(() => {\n    const getBarChartData = async () => {\n      try {\n        const response = await axios.get(` https://s3.amazonaws.com/roxiler.com/product_transaction.jsoncd ../bar-chart?month=${selectedMonth}`);\n        setBarChartData(response.data);\n      } catch (error) {\n        console.error('Error fetching bar chart data:', error);\n      }\n    };\n    getBarChartData();\n  }, [selectedMonth]);\n  const DataFormatter = number => {\n    if (number > 1000) {\n      return `${(number / 1000).toString()}k`;\n    }\n    return number.toString();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"barchart-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Bar Chart Status - \", selectedMonth]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n      width: \"100%\",\n      height: 300,\n      children: /*#__PURE__*/_jsxDEV(BarChart, {\n        data: barChartData,\n        margin: {\n          top: 5\n        },\n        children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n          strokeDasharray: \"3 3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n          dataKey: \"priceRange\",\n          tick: {\n            stroke: 'gray',\n            strokeWidth: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n          tickFormatter: DataFormatter,\n          tick: {\n            stroke: 'gray',\n            strokeWidth: 1\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Legend, {\n          wrapperStyle: {\n            padding: 30\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          dataKey: \"itemCount\",\n          name: \"Number of Items\",\n          fill: \"#37807e\",\n          barSize: \"20%\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 1\n  }, this);\n};\n_s(BarChartComponent, \"973F2gpMZpDTLCgKPKN5aX9uHaA=\");\n_c = BarChartComponent;\nexport default BarChartComponent;\nvar _c;\n$RefreshReg$(_c, \"BarChartComponent\");","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","XAxis","YAxis","Legend","ResponsiveContainer","CartesianGrid","axios","jsxDEV","_jsxDEV","BarChartComponent","props","_s","barChartData","setBarChartData","selectedMonth","getBarChartData","response","get","data","error","console","DataFormatter","number","toString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","height","margin","top","strokeDasharray","dataKey","tick","stroke","strokeWidth","tickFormatter","wrapperStyle","padding","name","fill","barSize","_c","$RefreshReg$"],"sources":["P:/Roxilers_Assesment/roxiler-frontend-master/src/components/BarChart/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, XAxis, YAxis, Legend, ResponsiveContainer,CartesianGrid } from 'recharts';\nimport axios from 'axios';\nimport './index.css'\n\nconst BarChartComponent = (props) => {\n    const [barChartData, setBarChartData] = useState([]);\n  const { selectedMonth } = props;\n\n  useEffect(() => {\n    const getBarChartData = async () => {\n      try {\n        const response = await axios.get(` https://s3.amazonaws.com/roxiler.com/product_transaction.jsoncd ../bar-chart?month=${selectedMonth}`);\n        setBarChartData(response.data);\n      } catch (error) {\n        console.error('Error fetching bar chart data:', error);\n      }\n    };\n\n    getBarChartData();\n  }, [selectedMonth]);\n\n  const DataFormatter = (number) => {\n    if (number > 1000) {\n      return `${(number / 1000).toString()}k`;\n    }\n    return number.toString();\n  };\n\n  return (\n<div className='barchart-container'>\n    <h2>Bar Chart Status - {selectedMonth}</h2>\n<ResponsiveContainer width=\"100%\" height={300}>\n      <BarChart data={barChartData} margin={{ top: 5 }}>\n      <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis\n          dataKey=\"priceRange\"\n          tick={{ stroke: 'gray', strokeWidth: 1 }}\n        />\n\n        <YAxis\n          tickFormatter={DataFormatter}\n          tick={{ stroke: 'gray', strokeWidth: 1 }}\n        />\n        <Legend wrapperStyle={{ padding: 30 }} />\n        <Bar dataKey=\"itemCount\" name=\"Number of Items\" fill=\"#37807e\" barSize=\"20%\" />\n      </BarChart>\n    </ResponsiveContainer>\n</div>\n  );\n};\n\nexport default BarChartComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,QAAQ,EAAEC,GAAG,EAAEC,KAAK,EAAEC,KAAK,EAAEC,MAAM,EAAEC,mBAAmB,EAACC,aAAa,QAAQ,UAAU;AACjG,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,aAAa;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpB,MAAMC,iBAAiB,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACjC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM;IAAEiB;EAAc,CAAC,GAAGJ,KAAK;EAE/BZ,SAAS,CAAC,MAAM;IACd,MAAMiB,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAE,uFAAsFH,aAAc,EAAC,CAAC;QACxID,eAAe,CAACG,QAAQ,CAACE,IAAI,CAAC;MAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACxD;IACF,CAAC;IAEDJ,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,CAACD,aAAa,CAAC,CAAC;EAEnB,MAAMO,aAAa,GAAIC,MAAM,IAAK;IAChC,IAAIA,MAAM,GAAG,IAAI,EAAE;MACjB,OAAQ,GAAE,CAACA,MAAM,GAAG,IAAI,EAAEC,QAAQ,CAAC,CAAE,GAAE;IACzC;IACA,OAAOD,MAAM,CAACC,QAAQ,CAAC,CAAC;EAC1B,CAAC;EAED,oBACFf,OAAA;IAAKgB,SAAS,EAAC,oBAAoB;IAAAC,QAAA,gBAC/BjB,OAAA;MAAAiB,QAAA,GAAI,qBAAmB,EAACX,aAAa;IAAA;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC/CrB,OAAA,CAACJ,mBAAmB;MAAC0B,KAAK,EAAC,MAAM;MAACC,MAAM,EAAE,GAAI;MAAAN,QAAA,eACxCjB,OAAA,CAACT,QAAQ;QAACmB,IAAI,EAAEN,YAAa;QAACoB,MAAM,EAAE;UAAEC,GAAG,EAAE;QAAE,CAAE;QAAAR,QAAA,gBACjDjB,OAAA,CAACH,aAAa;UAAC6B,eAAe,EAAC;QAAK;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACrCrB,OAAA,CAACP,KAAK;UACJkC,OAAO,EAAC,YAAY;UACpBC,IAAI,EAAE;YAAEC,MAAM,EAAE,MAAM;YAAEC,WAAW,EAAE;UAAE;QAAE;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1C,CAAC,eAEFrB,OAAA,CAACN,KAAK;UACJqC,aAAa,EAAElB,aAAc;UAC7Be,IAAI,EAAE;YAAEC,MAAM,EAAE,MAAM;YAAEC,WAAW,EAAE;UAAE;QAAE;UAAAZ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1C,CAAC,eACFrB,OAAA,CAACL,MAAM;UAACqC,YAAY,EAAE;YAAEC,OAAO,EAAE;UAAG;QAAE;UAAAf,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACzCrB,OAAA,CAACR,GAAG;UAACmC,OAAO,EAAC,WAAW;UAACO,IAAI,EAAC,iBAAiB;UAACC,IAAI,EAAC,SAAS;UAACC,OAAO,EAAC;QAAK;UAAAlB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrB,CAAC;AAEN,CAAC;AAAClB,EAAA,CA7CIF,iBAAiB;AAAAoC,EAAA,GAAjBpC,iBAAiB;AA+CvB,eAAeA,iBAAiB;AAAC,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}